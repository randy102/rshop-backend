type User{
  _id: String
  isAdmin: Boolean
  profile: Profile
  credential: Credential
}

type Query{
  users: [User] @Auth @Admin
  currentUser: User @Auth 
}

type LoginResponse{
  token: String
  user: User
}

type Mutation{
  loginUser(input: LoginInput): LoginResponse
  requestEmailConfirm(input: RequestEmailConfirmInput): String #Return requested email after mail sent
  registerUser(input: RegisterUserInput): User #Return created user

  changeUserPassword(input: ChangePasswordInput): String @Auth  #Return new token

  createUser(input: CreateUserInput): User @Auth @Admin
  updateAdmin(input: UpdateAdminInput): User @Auth @Admin
  deleteUser(input: DeleteUserInput): Boolean @Auth @Admin
}

input CreateUserInput{
  email: String
  fullName: String
  isAdmin: Boolean
}

input DeleteUserInput{
  ids: [String]
}

input UpdateAdminInput{
  _id: String
  isAdmin: Boolean
}

input RequestEmailConfirmInput{
  email: String
}

input RegisterUserInput{
  token: String
  fullName: String
  password: String
}
