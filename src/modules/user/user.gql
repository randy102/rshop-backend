type User{
  _id: String
  isAdmin: Boolean
  profile: Profile
  credential: Credential
  createdAt: Float
  creator: User
  updatedAt: Float
  updater: User
}

type Credential{
  email: String
}


type LoginResponse{
  token: String
  user: User
}

type Query{
  users: [User] @Admin
  usersByEmail(idShop: String, email: String): [User] @Staff(with: "STAFF")
  currentUser: User @Auth
}

type Mutation{
  loginUser(input: LoginInput): LoginResponse
  requestEmailConfirm(input: RequestEmailConfirmInput): String #Return requested email after mail sent
  registerUser(input: RegisterUserInput): User #Return created user

  changeUserPassword(input: ChangePasswordInput): String @Auth  #Return new token

  createUser(input: CreateUserInput): User  @Admin
  updateAdmin(input: UpdateAdminInput): User  @Admin
  deleteUser(input: DeleteUserInput): Boolean  @Admin
}


input LoginInput{
  email: String!
  password: String!
}

input CreateUserInput{
  email: String
  fullName: String
  isAdmin: Boolean
}

input ChangePasswordInput{
  old: String
  new: String
}

input DeleteUserInput{
  ids: [String]
}

input UpdateAdminInput{
  _id: String
  isAdmin: Boolean
}

input RequestEmailConfirmInput{
  email: String
}

input RegisterUserInput{
  token: String
  fullName: String
  password: String
}
